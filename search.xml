<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Win10  JDK环境变量配置</title>
      <link href="/2022/01/03/jdk-huan-jing-pei-zhi/"/>
      <url>/2022/01/03/jdk-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="windows10-JDK环境配置"><a href="#windows10-JDK环境配置" class="headerlink" title="windows10   JDK环境配置"></a>windows10   JDK环境配置</h1><h4 id="鼠标右键-“此电脑”-选择属性，之后会出现一个弹窗，点击-“高级系统设置”"><a href="#鼠标右键-“此电脑”-选择属性，之后会出现一个弹窗，点击-“高级系统设置”" class="headerlink" title="鼠标右键 “此电脑” 选择属性，之后会出现一个弹窗，点击 “高级系统设置”"></a>鼠标右键 “此电脑” 选择属性，之后会出现一个弹窗，点击 “高级系统设置”</h4><p>再点环境变量。</p><img src="\images\image-20210823220011909.png" tyle="zoom: 67%;" /><h4 id="点击-“环境变量”-然后会看到这样的画面："><a href="#点击-“环境变量”-然后会看到这样的画面：" class="headerlink" title="点击 “环境变量” 然后会看到这样的画面："></a>点击 “环境变量” 然后会看到这样的画面：</h4><img src="\images\image-20210823220215981.png"  style="zoom: 67%;" /><h4 id="在系统变量里新建，出现一个弹窗"><a href="#在系统变量里新建，出现一个弹窗" class="headerlink" title="在系统变量里新建，出现一个弹窗"></a>在系统变量里新建，出现一个弹窗</h4><img src="\images\image-20210823220635136.png"  style="zoom:67%;"  /><h4 id="配置path-找到系统变量中的path，双击或者点编辑。然后新建输入-JAVA-HOME-bin-图中红框。"><a href="#配置path-找到系统变量中的path，双击或者点编辑。然后新建输入-JAVA-HOME-bin-图中红框。" class="headerlink" title="配置path,找到系统变量中的path，双击或者点编辑。然后新建输入  %JAVA_HOME%\bin 图中红框。"></a>配置<strong>path</strong>,找到<strong>系统变量</strong>中的path，双击或者点编辑。然后新建输入  <strong>%JAVA_HOME%\bin</strong> <strong>图中红框。</strong></h4><img src="\images\image-20210823220854203.png"  style="zoom:67%;" /><h4 id="然后点确定保存，出去之后再点确定，然后再点确定。"><a href="#然后点确定保存，出去之后再点确定，然后再点确定。" class="headerlink" title="然后点确定保存，出去之后再点确定，然后再点确定。"></a>然后点确定保存，出去之后再点确定，然后再点确定。</h4><h4 id="验证环境变量配置"><a href="#验证环境变量配置" class="headerlink" title="验证环境变量配置"></a>验证环境变量配置</h4><h4 id="打开命令行窗口-输入java-version"><a href="#打开命令行窗口-输入java-version" class="headerlink" title="打开命令行窗口,输入java -version"></a>打开命令行窗口,输入java -version</h4><img src="\images\image-20210823221249875.png"  style="zoom:67%;" /><h4 id="然后输入javac"><a href="#然后输入javac" class="headerlink" title="然后输入javac"></a>然后输入javac</h4><img src="\images\image-20210823221350825.png"  style="zoom:67%;" /><h4 id="然后输入java"><a href="#然后输入java" class="headerlink" title="然后输入java"></a>然后输入java</h4><img src="\images\image-20210823221456476.png"  style="zoom:67%;" /><h4 id="至此，环境变量就配置完毕了。"><a href="#至此，环境变量就配置完毕了。" class="headerlink" title="至此，环境变量就配置完毕了。"></a>至此，环境变量就配置完毕了。</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存划分</title>
      <link href="/2022/01/03/java-nei-cun-hua-fen/"/>
      <url>/2022/01/03/java-nei-cun-hua-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="Java内存划分"><a href="#Java内存划分" class="headerlink" title="Java内存划分"></a>Java内存划分</h1><h4 id="1-栈内存"><a href="#1-栈内存" class="headerlink" title="1.栈内存"></a>1.栈内存</h4><p>存储都是局部变量。只要是在方法中定义的变量都是具备变量。<br>一旦变量的生命周期结束该变量就被释放。</p><h4 id="2-堆内存"><a href="#2-堆内存" class="headerlink" title="2.堆内存"></a>2.堆内存</h4><p>存储都是实体(对象)    </p><p>每一个实体都有一个首地址值。</p><p>堆内存的变量都有默认初始化值。不同类型不一样。</p><p>当实体不再使用时，就会被垃圾回收机制处理。</p><h4 id="3-方法区"><a href="#3-方法区" class="headerlink" title="3.方法区"></a>3.方法区</h4><p>1、方法区中保存着，类、静态变量、静态方法、常量、普通方法</p><p>2、方法区是线程共享的；当有多个线程都用到一个类的时候，而这个类还未被加载，则应该只有一个线程去加载类，让其他线程等待；</p><p>3、方法区的大小不必是固定的，jvm可以根据应用的需要动态调整。jvm也可以允许用户和程序指定方法区的初始大小，最小和最大限制；</p><p>4、方法区同样存在垃圾收集，因为通过用户定义的类加载器可以动态扩展Java程序，这样可能会导致一些类，不再被使用，变为垃圾。这时候需要进行垃圾清理。</p><h4 id="4-本地方法区"><a href="#4-本地方法区" class="headerlink" title="4.本地方法区"></a>4.本地方法区</h4><p> Java官方对于本地方法的定义为methods written in a language other than the Java programming language，就是使用非Java语言实现的方法，但是通常我们指的一般为C或者C++，因此这个栈也有着C栈这一称号。一个不支持本地方法执行的JVM没有必要实现这个数据区域。本地方法栈基本和JVM栈一样，其大小也是可以设置为固定值或者动态增加，因此也会对应抛出StackOverflowError和OutOfMemoryError错误。</p><h4 id="5-寄存器（程序计数器）"><a href="#5-寄存器（程序计数器）" class="headerlink" title="5.寄存器（程序计数器）"></a>5.寄存器（程序计数器）</h4><p><strong>PC寄存器（ PC register ）：每个线程启动的时候，都会创建一个PC（Program Counter，程序计数器）寄存器。</strong>PC寄存器里保存有当前正在执行的JVM指令的地址。 每一个线程都有它自己的PC寄存器，也是该线程启动时创建的。保存下一条将要执行的指令地址的寄存器是 ：PC寄存器。PC寄存器的内容总是指向下一条将被执行指令的地址，这里的地址可以是一个本地指针，也可以是在方法区中相对应于该方法起始指令的偏移量。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常总结</title>
      <link href="/2022/01/03/java-yi-chang/"/>
      <url>/2022/01/03/java-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常总结"><a href="#Java异常总结" class="headerlink" title="Java异常总结"></a>Java异常总结</h1><p>Java提供了大量的异常类，这些类都继承子java.lang.Throwable类</p><p>首先看一下Throwable的继承体系</p><img src="\images\image-20210924144001066.png" /><p><strong>Error</strong>:一般是指与虚拟机相关的问题，如：系统崩溃、虚拟机错误、内存空</p><p>间不足、方法调用栈溢出等。这类错误将会导致应用程序中断，不做针对性</p><p>处理。直接修改代码。</p><p><strong>Exception</strong>:分为运行时异常和编译时异常。</p><ul><li><p><strong>运行时异常</strong>：如：空指针异常、指定的类找不到、数组越界、方法传递</p><p>参数错误、数据类型转换错误。可以编译通过，但是一运行就停止了，</p><p>程序不会自己处理；</p></li><li><p><strong>编译时异常</strong>：要么用 try … catch… 捕获，要么用 throws 声明抛出，交给父类处理。</p></li></ul><h4 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h4><p>1.遇到问题不进行具体的处理，而是继续抛给调用者。其实就是在函数上通</p><p>过throws关键字声明异常。告诉调用者处理</p><p>2.针对性的处理方式：用try/catch 捕获！</p><h4 id="throw和throws区别"><a href="#throw和throws区别" class="headerlink" title="throw和throws区别"></a>throw和throws区别</h4><p><strong>throws</strong>：在方法声明后面，用来声明异常，让调用者只知道该功能有可能出</p><p>现的问题，并由调用者可以给出预先的处理方式。</p><p><strong>throw</strong>:在方法体内部，抛出具体问题对象。执行到throw功能就已经结束</p><p>了，跳转到调用者。并将具体的问题对象也抛给调用者。</p><h4 id="异常处理的原则"><a href="#异常处理的原则" class="headerlink" title="异常处理的原则"></a>异常处理的原则</h4><ul><li><p>功能内部有异常throw抛出，功能上一定要throws声明。</p><p>​    内部抛什么，功能上就声明什么。</p><p>​    声明的目的就是为了让调用者处理，如果调用者不处理，编译失败。</p></li><li><p>特殊情况:<br>当函数内通过throw抛出了RuntimeException及其子类的异常对象时，</p><p>函数上可以不用throws声明。</p><p>不声明的目的就是不让调用者处理。让调用者的程序停止。要对代码进</p><p>行修改。</p></li></ul><h4 id="覆盖时的注意事项"><a href="#覆盖时的注意事项" class="headerlink" title="覆盖时的注意事项"></a>覆盖时的注意事项</h4><ul><li><p>子类方法覆盖父类方法只能抛出父类方法异常或者该异常的子类。</p><p>如果父类方法抛出多个异常，子类只能抛出父类异常的子集</p><p>原则：就是子类的异常必须要在父类的异常处理控制中。</p></li><li><p><strong>注意</strong>：有一种情况，只能try不能throws。</p><p>被覆盖的方法没有抛出异常。</p><p>那么子类在覆盖时，子类方法中发生了异常，就只能try 无法throws声</p><p>明。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类和匿名内部类</title>
      <link href="/2022/01/03/nei-bu-lei-he-ni-ming-nei-bu-lei/"/>
      <url>/2022/01/03/nei-bu-lei-he-ni-ming-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>定义在类中的类。</p><p><strong>好处</strong>：可以直接访问外部类中的成员。</p><p>外部类要访问内部类需要创建内部类的对象。</p><p>内部类直接访问外部类的原理：因为内部类持有了外部类的引用。外部类名.this</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//内部类。</span><span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"inner show "</span><span class="token operator">+</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Inner</span> in  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部类要访问内部类需要创建内部类的对象。</span>in<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">InnerClassDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Outer</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部类方法的调用及对象的创建</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">/*如果把内部类定义在成员位置上。他就可以被成员修饰符所修饰。public  private static */</span><span class="token comment">//public</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner_1</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inner show..."</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//private</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Inner_2</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inner show..."</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Inner_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//static</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner_3</span><span class="token comment">//非静态内部类中只能定义静态常量，其他静态修饰的成员都不允许。</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inner show...."</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">InnerClassDemo2</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*//直接创建内部类对象。Outer.Inner_1  in = new Outer().new Inner_1();in.show();*/</span><span class="token comment">/*new Outer().method();*/</span><span class="token comment">/*内部类静态，访问非静态的方法。Outer.Inner_3 in = new Outer.Inner_3();in.show();*/</span><span class="token comment">/*内部类静态，访问静态的方法。Outer.Inner_3.show();*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>就是内部类的简化格式。</p><p>内部类必须继承一个类或者实现接口，这种情况下的内部类可以简化成匿名内部类</p><p><strong>其实匿名内部类就是一个子类对象。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Fu</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0x0088</span>f<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*下面两个匿名内部类有区别吗？为什么？*/</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//匿名内部类括号里 是子类对象的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里会编译出错，</span>        <span class="token comment">//因为Object obj指向了自己的子类对象。对象提升为了Object 就不能调用子类的特有方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字总结</title>
      <link href="/2022/01/03/guan-jian-zi/"/>
      <url>/2022/01/03/guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><h4 id="为什么用this？"><a href="#为什么用this？" class="headerlink" title="为什么用this？"></a>为什么用this？</h4><p>区分局部变量和成员变量同名的情况。</p><p>用this标识的是成员变量。</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="this到底是指谁？"><a href="#this到底是指谁？" class="headerlink" title="this到底是指谁？"></a>this到底是指谁？</h4><p>this其实就代表对象，代表哪个对象呢？</p><p>哪个对象调用了this所在的函数。this就指向哪个对象。</p><p>(this就代表着当前这个对象)</p><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1，静态的数据被对象所共享。</p><p>2，它优先于对象加载并存在。随着类的加载而加载。</p><p>3，静态的数据多了一种调用方式：可以直接被类名所调用。</p><p><strong>既然静态调用这么方便，是不是可以让所有的成员变量变成静态的呢？</strong><br>不行，因为数据中有些是<strong>对象共享的数据需要静态化</strong>，节省内存空间，严谨。</p><p>有些数据是对象特有的数据，这些存储到对象中。<br>这也是成员变量是否要静态的依据！</p><p><strong>静态变量和成员变量的区别？</strong></p><p>名称(所属)：<br>静态变量所属于类，也称为 类变量。<br>成员变量所属于对象，也称为 实例变量。</p><p>内存位置：<br>静态变量存储于方法区中的静态区中。<br>成员变量存储于堆内存的对象中。</p><p>加载先后：<br>静态变量随着类的加载而加载，随着类的消失而消失。<br>成员变量随着对象的加载而加载，随着对象的消失而消失。</p><h4 id="静态方法："><a href="#静态方法：" class="headerlink" title="静态方法："></a>静态方法：</h4><p>1,静态方法只能访问静态成员，不能直接访问非静态成员。非静态的方法可以访问静态和非静态。<br>    <strong>原因</strong>：就是加载的先后顺序问题。先加载的不能访问后加载。<br>2,静态方法中不可以出现this，super关键字。</p><p><strong>什么时候方法静态？</strong></p><p>​        当方法中如果没有访问对象的特有数据，或者说没有调用过非静态的内容。该方法就静态化。虽然不静态也可以使用，但是创建调用它的对象没有意义。</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">P</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//sleep（）并没有使用对象中的数据，该对象的建立没有意义，此时就可以用静态修饰</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"huhu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="fina关键字"><a href="#fina关键字" class="headerlink" title="fina关键字"></a>fina关键字</h1><p>1，final修饰类，函数，变量。</p><p>2，final修饰的类不可以被继承。</p><p>3，final修饰的方法不可以被覆盖。</p><p>4，final修饰的变量是一个常量，只能被赋值一次。</p><p>程序中不变的数据都用final修饰，提供程序的阅读性。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数</title>
      <link href="/2022/01/03/gou-zao-han-shu/"/>
      <url>/2022/01/03/gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>就是对 对象进行初始化的。对象会自动调用对应的构造函数。</p><p><strong>那么类中没有定义过构造函数，那么new对象到底是怎么初始化的呢？</strong></p><p>其实class定义的类中，在没有声明任何构造函数的情况下，类中默认会有一个空参数的构造函数。</p><p>如果类中自定义了构造函数，默认的构造函数就没有了。</p><p>构造函数在类中有多个的情况下，是以重载的形式存在的。</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token comment">//有参构造</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//无参构造</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数和一般函数的区别？"><a href="#构造函数和一般函数的区别？" class="headerlink" title="构造函数和一般函数的区别？"></a>构造函数和一般函数的区别？</h4><p><strong>定义上</strong>：<br>构造函数只为对象的初始化，只执行一次。<br>一般函数定义对象应该具备的功能。可以被调用多次。</p><p><strong>运行上</strong>：<br>构造函数在对象一创建，就会执行。<br>一般函数是只有被对象调用才执行。</p><h4 id="那么什么时候定义构造函数呢？"><a href="#那么什么时候定义构造函数呢？" class="headerlink" title="那么什么时候定义构造函数呢？"></a>那么什么时候定义构造函数呢？</h4><p>当对象创建时，需要对象必须具备的内容，通过构造函数完成。<br>比如婴儿出生，有的有姓名，有的没有姓名，意味着有不同的初始化。所以要定义多个构造函数。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解和反射</title>
      <link href="/2022/01/03/fan-she/"/>
      <url>/2022/01/03/fan-she/</url>
      
        <content type="html"><![CDATA[<h4 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h4><ul><li><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p></li><li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li><p>好处：</p><p>1.可以再程序运行过程中，操作这些对象</p><p>2.可以解耦，提高程序的可扩展性</p><img src="C:\Users\少年\AppData\Roaming\Typora\typora-user-images\image-20210923165816590.png" alt="image-20210923165816590" style="zoom: 67%;" align="left" /></li></ul></li><li><p>获取Class对象的方式</p><p>1.Class.forname(“全类名”)：将字节码文件加载进内存，返回Class对象。（多用于配置文件，将类名定义在配置文件中。读取文件，加载类）</p><p>2.类名.class：通过类名的属性class获取（多用于参数的传递）</p><p>3.对象.getClass():getClass()方法在Object类中定义着（多用于对象的获取字节码对象的方式）</p></li><li><p>结论</p><p>同一个字节码文件，在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取Class对象都是同一个。（指向通一个堆地址）</p></li><li><p>使用Class对象功能</p><ul><li><p>获取功能</p><p>1.获取成员变量们</p><ul><li>Field[]  getFields()  只能获取public修饰的成员变量</li><li>Field  getField(String name) 只能获取指定的public修饰的成员变量</li><li>Field[]  getDeclareFields()</li><li>Field getDeclareField(String name)</li></ul><p>2.获取构造方法们</p><ul><li><p>Constructor&lt;?&gt;[]  getConstructors()</p></li><li><p>Constructor<T>  getConstruct(类&lt;?&gt;…parameterTypes)</p></li></ul></li><li><p>```java</p><pre><code>getConstructor(int.class,String.class);</code></pre><pre class="line-numbers language-none"><code class="language-none">        - Constructor&lt;?&gt;[]  getDeclareConstructors()        - Constructor&lt;T&gt;  getDeclareConstruct(类&lt;?&gt;...parameterTypes)    3.获取成员方法们    - Method[]  getMethods()    - Method   getMethod(String name,类&lt;?&gt;...parameterTypes)    - Method[]  getDeclareMethods()    - Method   getDeclareMethod(String name,类&lt;?&gt;...parameterTypes)        4.获取类名        - String getName(）  #### 案例- 需求：写一个”框架“，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法  - 实现    1.配置文件    2.反射  - 步骤    1.将需要创建的对象的全类名和需要执行的方法定义在配置文件中    2.在程序中加载读取配置文件    3.使用反射技术来加载类文件进内存    4.创建对象    5.执行方法#### 注解- 概念：书名程序的 - 注释：用文字描述程序的，给程序员看的。- 作用分类：  1.编写文档：通过代码里标识的注解生成doc文档  2.代码分析：通过代码里标识的注解对代码进行分析【使用反射】  3.编译检查：通过代码里标识的注解让编译器能够实现基本的 编译检查【@override】- JDK预定义的一些注解  - @Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法      时，会报编译错误。  - @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。  - @SuppressWarnings - 指示编译器去忽略注解中声明的警告。- 自定义注解  - 格式    元注解    public @interface 注解名称｛｝    &#96;&#96;&#96;java    @Target&#x2F;&#x2F;元注解    public @interfa MyAnno&#123;        int age();        String name();        String[] strs();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>本质：注解本质就是一个接口，该接口默认继承Annotation接口</p></li><li><p>属性（方法）：接口中可以定义的成员方法（抽象方法）</p><p>1.属性的返回值类型：基本数据类型，字符串（String），枚举，注解</p><p>2.定义了属性，在使用时需要给属性赋值。如果属性名称是value，则value可以省略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyAnno</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">19</span>，strs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"asd"</span><span class="token punctuation">,</span><span class="token string">"afds"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> woeker<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>元注解：描述注解的注解</p><ul><li>@Target:描述注解能够作用的位置<ul><li>ElemType取值<ul><li>TYPE：作用于类上</li><li>METHOD：作用于方法上</li><li>FIELD：作用于成员变量上</li></ul></li></ul></li><li>@Retention:描述注解被保留的阶段<ul><li>@REtention(RetentionPoliyc.RUNTIME)当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li>Documented:描述注解是否被抽取到api文档中</li><li>Inherited：描述注解是否被子类继承</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2022/01/03/dan-li-she-ji-mo-shi/"/>
      <url>/2022/01/03/dan-li-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h1><p><strong>解决的问题：</strong>保证一个类在内存中的对象唯一性</p><p><strong>思路：</strong></p><p>1，不让其他程序创建该类对象。<br>2，其他程序不能创建，只有在本程序中创建一个对象。<br>3，将自定义的对象提供给其他程序访问。</p><p><strong>步骤：</strong><br>1，私有化构造函数。<br>2，自己new一个本类对象。<br>3，对外提供一个方法可以获取到这个对象。</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉式，延迟加载方式。</span><span class="token comment">//存在一些小问题，这是涉及到多线程技术的。</span><span class="token keyword">class</span> <span class="token class-name">Single</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Single</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Single</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Single2</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Single2</span> s <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Single2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Single2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Single2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**/</span><span class="token punctuation">&#125;</span><span class="token comment">//饿汉式</span><span class="token keyword">class</span> <span class="token class-name">Single</span><span class="token punctuation">&#123;</span><span class="token comment">//创建一个本类对象。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Single</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//私有化构造函数。</span><span class="token keyword">private</span> <span class="token class-name">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//对外提供方法，让其他程序获取该对象。</span><span class="token comment">//结果？Single</span><span class="token comment">//参数/ 无。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Single</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SingleDemo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Single</span> s1 <span class="token operator">=</span> <span class="token class-name">Single</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Single</span> s2 <span class="token operator">=</span> <span class="token class-name">Single</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/2022/01/03/dai-ma-kuai/"/>
      <url>/2022/01/03/dai-ma-kuai/</url>
      
        <content type="html"><![CDATA[<h4 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h4><p><strong>作用</strong>：给所有的对象初始化</p><p>例 ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"baby"</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token comment">//构造代码块作用，给所有的对象初始化。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"code......"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//构造函数只给对应的对象初始化。</span><span class="token punctuation">&#123;</span><span class="token comment">//cry();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person() run...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//cry();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person(name) run......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哇哇......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h4><p><strong>作用</strong>：控制局部变量的生命周期</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token comment">//局部代码块。控制局部变量的生命周期。</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p><strong>特点</strong>：随着类的加载而执行，而且只执行一次。</p><p><strong>作用</strong>：用来给类进行初始化的。</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StaticCode</span><span class="token punctuation">&#123;</span><span class="token comment">//static int x= 3;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token comment">//x = 5;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">StaticCode</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为</p><img src="C:\Users\少年\AppData\Roaming\Typora\typora-user-images\image-20210816162358162.png" alt="image-20210816162358162" align="left"  />]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征性</title>
      <link href="/2022/01/03/mian-xiang-dui-xiang-san-da-te-zheng-xing/"/>
      <url>/2022/01/03/mian-xiang-dui-xiang-san-da-te-zheng-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象三大特征性"><a href="#面向对象三大特征性" class="headerlink" title="面向对象三大特征性"></a>面向对象三大特征性</h1><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>1.提高程序的安全性，保护数据</p><p>2.隐藏代码的实现细节,对外提供访问方式</p><p>3.统一接口</p><p>4.系统可维护增强了</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的本质是对某一批类的抽象</p><p>提高了代码的复用性</p><p>让类与类之间产生了关系，给多态提供了前提</p><p><strong>什么时候写继承</strong>？<br>事物之间存在着所属(is a)关系时，才继承。xxx是yyy中的一种。</p><p><strong>super注意点</strong></p><p>1.super调用父类的构造方法，必须在构造方法的第一个</p><p>2.super必须只能出现在子类的方法或构造方法中！</p><p>3.super和this不能同时调用构造方法！</p><p><strong>this</strong>:本身调用这个对象（没有继承也可以使用）</p><p><strong>super</strong>:代表父类对象的应用（只能在继承条件下可以使用）</p><p><strong>继承的覆盖使用注意事项：</strong></p><p>1，子类覆盖父类权限必须大于等于父类的权限</p><p>。public&gt;protected&gt;default&gt;private</p><p>2，覆盖中，静态只能覆盖静态，或者被静态覆盖。</p><p><strong>重写</strong>：需要有继承关系，子类重写父类的方法。子类必须与父</p><p>类一致，子类重写了父类的方法，执行子类的方法</p><p><strong>为什么需要重写</strong>？</p><p>父类的功能，子类不一定需要，或者不一定满足</p><p><strong>创建子类对象，父类中的构造函数也运行了。</strong><br><strong>为什么呢？</strong></p><p>其实在子类的所有构造函数中的第一行，都有一句默认的super();在调用父类中的空</p><p>参数构造函数。</p><p><strong>例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span><span class="token class-name">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//super();</span><span class="token comment">//显示初始化。</span><span class="token comment">//构造代码块初始化。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**/</span><span class="token class-name">Fu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu ..."</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span><span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//super();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi ..."</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExtendsDemo4</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>某一事物的多种体现形态。<br>重点是对象的多态性。</p><p><strong>多态在程序中的体现</strong>：父类或者接口的引用指向了自己的子类对象。</p><p><strong>多态的好处：</strong>提高了代码的扩展性，后期出现的功能，可以被之前的程序所执行。</p><p><strong>多态的弊端</strong>：虽然可以使用后期出现的代码，但是不能使用子类特有的功能。只能使用覆盖了父类的功能。</p><p><strong>多态的前提</strong>：必须要有关系(继承，实现)，通常会有覆盖操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上转型。什么时候用？需要提高程序的扩展性，隐藏具体子类型时。</span><span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span><span class="token comment">//向下转型。什么时候用？当需要使用子类型的特有方法时。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Animal a = new Dog();//向上转型。什么时候用？需要提高程序的扩展性，隐藏具体子类型时。</p><p>Cat c = (Cat)a;//向下转型。什么时候用？当需要使用子类型的特有方法时。</p><p><strong>不能重写的方法</strong></p><p>1.static方法属于类，不属于实例</p><p>2.final 修饰    常量</p><p>3.private 修饰的方法</p><p>以后开发：<br>不断的描述对象，创建对象，使用对象，并维护对象之间的关系。</p><h4 id="多态的调用方式在子父类中的特殊体现。"><a href="#多态的调用方式在子父类中的特殊体现。" class="headerlink" title="多态的调用方式在子父类中的特殊体现。"></a>多态的调用方式在子父类中的特殊体现。</h4><p><strong>1，成员变量。</strong></p><p>​    多态调用的时，编译和运行都参考引用型变量所属的类中的成员变量。<br>​    编译和运行看等号的左边。<br>​<br><strong>2，成员函数。</strong></p><p>​    多态调用时，编译参考的是引用型变量所属的类，运行时参考的是对象所属类。<br>​    编译看左边，运行看右边。因为函数有一个覆盖的特性。</p><p><strong>3，静态函数</strong>。</p><p>​    多态调用时，编译和运行都参考引用型变量所属的类中的静态函数。<br>​    编译和运行看等号的左边。<br>​    </p><p>成员变量和静态函数，看左边。<br>只有非静态函数，编译看左边，运行看右边;</p><p><strong>例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span><span class="token comment">//int num = 4;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span><span class="token comment">//int num = 5;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DuoTaiDemo4</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*静态函数,静态绑定到所属类上。*/</span><span class="token class-name">Fu</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Zi</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Zi</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>z<span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*//成员函数。动态绑定到当前对象上Fu f = new Zi();f.show();*/</span><span class="token comment">/*//成员变量Fu f = new Zi();Zi z = (Zi)f;System.out.println(f.num);//4System.out.println(z.num);//5*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类和接口总结</title>
      <link href="/2022/01/03/chou-xiang-lei-he-jie-kou/"/>
      <url>/2022/01/03/chou-xiang-lei-he-jie-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h1><h4 id="抽象的特点："><a href="#抽象的特点：" class="headerlink" title="抽象的特点："></a>抽象的特点：</h4><p>1，抽象方法没有方法体，必须由抽象关键字所修饰。<br>2，抽象方法一定存在于抽象类中，必须由抽象关键字所修饰。<br>3，抽象类不可以实例化。因为调用抽象方法没意义。<br>4，子类必须覆盖抽象类的所有抽象方法后，子类就可以实例化。否则该子类还是抽象类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span>  <span class="token keyword">class</span> animal<span class="token punctuation">&#123;</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">shut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抽象类的常见问题："><a href="#抽象类的常见问题：" class="headerlink" title="抽象类的常见问题："></a>抽象类的常见问题：</h4><p><strong>1，抽象类一定是父类吗？</strong></p><p>​    是的，因为只有子类覆盖了抽象类中的方法，才可以创</p><p>建对象，去使用这些方法。</p><p><strong>2，抽象类中有构造方法吗？</strong></p><p>​    有，因为父类的构造函数可以给子类对象初始化。</p><p><strong>3，抽象类中一定有抽象方法吗？</strong></p><p>不一定。其实抽象类和一般类都是用来描述事物的。都有具体的属性和行为。</p><p>不同之处：<br>抽象类中可以定义抽象类方法。但是不能实例化。<br>一般类中不可以定义抽象方法，但是可以实例化。</p><p><strong>4，抽象关键字不可以和哪些关键字共存呢？</strong><br>    final:<br>    private:<br>    static:</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口可以简单的理解为是一个特殊的抽象类。</p><p>用关键字interface来定义接口。接口中的方法都是抽象方法<br>接口中的成员都是public修饰的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Inter</span><span class="token punctuation">&#123;</span><span class="token comment">/*最常见的成员;全局常量，抽象方法。*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>好处</strong>：</p><p>1.可以被多实现！一个类可以同时实现多个接口。</p><p>2.避免了单继承的局限性。</p><p>3.接口可以多继承</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">DemoB</span> <span class="token keyword">extends</span> <span class="token class-name">DemoA</span><span class="token punctuation">,</span><span class="token class-name">DemoAA</span><span class="token comment">//接口上可以有多继承。</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
